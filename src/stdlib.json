{"bool":"let _true = _a => _b => _a\nlet _false = _a => _b => _b\nlet _and = _p => _q => _p(_q)(_false)\nlet _or = _p => _q => _p(_true)(_q)\nlet _not = _p => _p(_false)(_true)\nlet _xor = _p => _q => _p(_not(_q))(_q)\n","pair":"let _pair = _a => _b => _p => _p(_a)(_b)\nlet _first = _p => _p(_a => _b => _a)\nlet _last = _p => _p(_a => _b => _b)\n","natural":"let _0 = _f => _x => _x\nlet _suc = _n => _f => _x => _f(_n(_f)(_x))\nlet _1 = _suc(_0)\nlet _2 = _suc(_1)\nlet _3 = _suc(_2)\nlet _4 = _suc(_3)\nlet _5 = _suc(_4)\nlet _6 = _suc(_5)\nlet _7 = _suc(_6)\nlet _8 = _suc(_7)\nlet _9 = _suc(_8)\nlet _add = _m => _n => _f => _x => _m(_f)(_n(_f)(_x))\nlet _mul = _m => _n => _f => _m(_n(_f))\n","int":"let _0 = _f => _x => _x\nlet _suc = _n => _f => _x => _f(_n(_f)(_x))\nlet _1 = _suc(_0)\nlet _2 = _suc(_1)\nlet _3 = _suc(_2)\nlet _4 = _suc(_3)\nlet _5 = _suc(_4)\nlet _6 = _suc(_5)\nlet _7 = _suc(_6)\nlet _8 = _suc(_7)\nlet _9 = _suc(_8)\nlet _add = _m => _n => _f => _x => _m(_f)(_n(_f)(_x))\nlet _mul = _m => _n => _f => _m(_n(_f))\nlet _pair = _a => _b => _p => _p(_a)(_b)\nlet _first = _p => _p(_a => _b => _a)\nlet _last = _p => _p(_a => _b => _b)\nlet _int = _pair\n_1 = _int(_1)(_0)\n_2 = _int(_2)(_0)\n_3 = _int(_3)(_0)\n_4 = _int(_4)(_0)\n_5 = _int(_5)(_0)\n_6 = _int(_6)(_0)\n_7 = _int(_7)(_0)\n_8 = _int(_8)(_0)\n_9 = _int(_9)(_0)\n_0 = _int(_0)(_0)\nlet _neg = _k => _int(_last(_k))(_first(_k))\n_add = _k => _l => _int(_add(_last(_k))(_last(_l)))(_add(_first(_k))(_first(_l)))\nlet _sub = _k => _l => _add(_k)(_neg(_l))\n_mul = _k => _l => _int(_add(_mul(_first(_k))(_first(_l)))(_mul(_last(_k))(_last(_l))))(_add(_mul(_last(_k))(_last(_l)))(_mul(_first(_k))(_first(_l))))\n","io":"\nconst _logBool = b => console.log(b(true)(false));\nconst _logPair = p => console.log([p(a=>b=>a), p(a=>b=>b)]);\nconst _logNat = n => console.log(n(x=>x+1)(0));\nconst _logInt = i => console.log(i(a=>b=>a)(x=>x+1)(0) - i(a=>b=>b)(x=>x+1)(0));\n"}